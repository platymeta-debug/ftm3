# analysis/confluence_engine.py (ÏµúÏ¢Ö ÏôÑÏÑ±Î≥∏ - strategies.json ÏùòÏ°¥ÏÑ± Ï†úÍ±∞)

from __future__ import annotations
import math
from typing import Dict, Tuple, Optional, List
import pandas as pd
from binance.client import Client
import requests
import statistics

from . import data_fetcher, indicator_calculator
from .core_strategy import diagnose_market_regime, MarketRegime as TechnicalRegime
from .macro_analyzer import MacroAnalyzer
from .strategies.trend_strategy import TrendStrategy
from .strategies.oscillator_strategy import OscillatorStrategy
from .strategies.comprehensive_strategy import ComprehensiveStrategy
from .strategies.signal_filter_strategy import SignalFilterStrategy
from core.config_manager import config

class ConfluenceEngine:
    """
    Í∏∞Ïà†Ï†Å Î∂ÑÏÑù, Í±∞Ïãú Í≤ΩÏ†ú Î∂ÑÏÑù, ÎèôÏ†Å ÌååÎùºÎØ∏ÌÑ∞Î•º ÌÜµÌï©ÌïòÏó¨ ÏµúÏ¢Ö Í≤∞Ï†ïÏùÑ ÎÇ¥Î¶¨Îäî 'ÎëêÎáå' Î™®Îìà.
    """
    def __init__(self, client: Client):
        self.client = client
        self.fear_and_greed_index = 50
        self.macro_analyzer = MacroAnalyzer()

        # --- ‚ñº‚ñº‚ñº [ÏàòÏ†ï] strategies.json ÏùòÏ°¥ÏÑ± Ï†úÍ±∞ Î∞è Ï†ÑÎûµ ÏßÅÏ†ë Ï¥àÍ∏∞Ìôî ‚ñº‚ñº‚ñº ---
        # Ïù¥Ï†ú ConfluenceEngineÏùÄ Ïô∏Î∂Ä ÏÑ§Ï†ï ÌååÏùº ÏóÜÏù¥ Ïä§Ïä§Î°ú Î™®Îì† Ï†ÑÎûµÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§.
        self.strategies = []
        strategy_classes = {
            "TrendStrategy": TrendStrategy,
            "OscillatorStrategy": OscillatorStrategy,
            "ComprehensiveStrategy": ComprehensiveStrategy,
        }

        for name, cls in strategy_classes.items():
            # config Í∞ùÏ≤¥Î•º ÌÜµÌï¥ strategies.json ÌååÏùºÏùò ÎÇ¥Ïö©ÏùÑ Í∞ÄÏ†∏Ïò¥
            strategy_config = config.strategy_configs.get(name, {})
            if strategy_config.get("enabled", True): # Í∏∞Î≥∏Ï†ÅÏúºÎ°ú ÌôúÏÑ±Ìôî
                # Ìï¥Îãπ Ï†ÑÎûµ ÌÅ¥ÎûòÏä§Î•º Ï¥àÍ∏∞ÌôîÌï† Îïå, ÌååÎùºÎØ∏ÌÑ∞Î•º Ï†ÑÎã¨
                self.strategies.append(cls(params=strategy_config))
        self.filter = SignalFilterStrategy()
        print(f"‚úÖ [ÏµúÏ¢Ö] {len(self.strategies)}Í∞ú Î∂ÑÏÑù Ï†ÑÎûµ, 1Í∞ú Ïã†Ìò∏ ÌïÑÌÑ∞, 1Í∞ú Í±∞Ïãú Î∂ÑÏÑùÍ∏∞Í∞Ä Î°úÎìúÎêòÏóàÏäµÎãàÎã§.")
        # --- ‚ñ≤‚ñ≤‚ñ≤ [ÏàòÏ†ï] ---

    def analyze_and_decide(self, symbol: str, recent_scores: List[float], market_regime: str) -> Tuple[Optional[str], str, Optional[dict]]:
        """
        Î™®Îì† Î∂ÑÏÑùÏùÑ Ï¢ÖÌï©ÌïòÏó¨ ÏµúÏ¢Ö Îß§Îß§ Î∞©Ìñ•, Í≤∞Ï†ï ÏÇ¨Ïú†, Ï£ºÎ¨∏ Ïª®ÌÖçÏä§Ìä∏Î•º Î∞òÌôòÌï©ÎãàÎã§.
        """
        analysis_result = self.analyze_symbol(symbol)
        if not analysis_result:
            return None, f"[{symbol}]: Îç∞Ïù¥ÌÑ∞ Î∂ÑÏÑù Ïã§Ìå®.", None

        final_score, _, tf_rows, _, _, _ = analysis_result
        four_hour_row = tf_rows.get("4h")
        if four_hour_row is None:
            return None, f"[{symbol}]: ÌïµÏã¨ Îç∞Ïù¥ÌÑ∞(4h) Î∂ÄÏ°±.", None

        market_data_for_diag = pd.Series({
            'adx_4h': four_hour_row.get('ADX_14'),
            'is_above_ema200_1d': tf_rows.get("1d", {}).get('close') > tf_rows.get("1d", {}).get('EMA_200', float('inf'))
        })
        technical_regime = diagnose_market_regime(market_data_for_diag, config.market_regime_adx_th)

        if technical_regime not in [TechnicalRegime.BULL_TREND, TechnicalRegime.BEAR_TREND]:
            return None, f"[{symbol}]: Í∏∞Ïà†Ï†Å Ìö°Î≥¥Ïû•({technical_regime.value}). Í¥ÄÎßù.", None

        if len(recent_scores) < config.trend_entry_confirm_count:
            return None, f"[{symbol}]: Ïã†Ìò∏ Î∂ÄÏ°±({len(recent_scores)}/{config.trend_entry_confirm_count}). Í¥ÄÎßù.", None

        avg_score = statistics.mean(recent_scores)
        std_dev = statistics.pstdev(recent_scores) if len(recent_scores) > 1 else 0

        params = config.get_strategy_params(symbol, market_regime)
        open_threshold = params.get('open_th', 12.0)

        side = None
        if technical_regime == TechnicalRegime.BULL_TREND and avg_score >= open_threshold and std_dev <= 3.0:
            side = "BUY"
        elif technical_regime == TechnicalRegime.BEAR_TREND and abs(avg_score) >= open_threshold and std_dev <= 3.0:
            side = "SELL"

        if not side:
            return None, f"[{symbol}]: Ïã†Ìò∏ ÌíàÏßà ÎØ∏Îã¨(Avg:{avg_score:.1f}, Th:{open_threshold}). Í¥ÄÎßù.", None

        four_hour_data = self.get_full_data(symbol, "4h")
        if four_hour_data is None:
             return None, f"[{symbol}]: ÌïÑÌÑ∞ÎßÅ Îç∞Ïù¥ÌÑ∞(4h) Î∂ÄÏ°±.", None

        filter_result = self.filter.analyze(four_hour_data)
        if not filter_result["is_valid"]:
            return None, f"[{symbol}]: Ïã†Ìò∏ ÌïÑÌÑ∞ÎßÅÎê® ({filter_result['reason']}). Í¥ÄÎßù.", None

        decision_reason = f"üöÄ [{symbol}] {side} ÏßÑÏûÖ! (Avg: {avg_score:.1f}, Tech: {technical_regime.value})"
        entry_context = {"avg_score": avg_score, "entry_atr": self.extract_atr(tf_rows)}
        return side, decision_reason, entry_context

    def get_full_data(self, symbol: str, timeframe: str) -> Optional[pd.DataFrame]:
        try:
            df = data_fetcher.fetch_klines(self.client, symbol, timeframe, limit=200)
            if df is None or df.empty: return None
            return indicator_calculator.calculate_all_indicators(df)
        except Exception:
            return None

    def analyze_symbol(self, symbol: str) -> Optional[Tuple[float, Dict, Dict, Dict, int, str]]:
        try:
            self._fetch_fear_and_greed_index()
            tf_data = {tf: self.get_full_data(symbol, tf) for tf in config.analysis_timeframes}
            if not any(df is not None and not df.empty for df in tf_data.values()): return None

            tf_scores = {tf: self._calculate_tactical_score(data)[0] for tf, data in tf_data.items() if data is not None}
            tf_score_breakdowns = {tf: self._calculate_tactical_score(data)[1] for tf, data in tf_data.items() if data is not None}
            tf_rows = {tf: data.iloc[-1] for tf, data in tf_data.items() if data is not None}

            weights = dict(zip(config.analysis_timeframes, config.tf_vote_weights))
            final_score = sum(tf_scores.get(tf, 0) * weights.get(tf, 1.0) for tf in config.analysis_timeframes)
            
            # (ÎÇòÎ®∏ÏßÄ Î°úÏßÅÏùÄ Ïù¥Ï†ÑÍ≥º ÎèôÏùº)
            return final_score, tf_scores, tf_rows, tf_score_breakdowns, self.fear_and_greed_index, ""
        except Exception as e:
            print(f"üö® {symbol} Î∂ÑÏÑù Ï§ë Ïò§Î•ò: {e}")
            return None

    def _fetch_fear_and_greed_index(self):
        try:
            r = requests.get("https://api.alternative.me/fng/?limit=1", timeout=5)
            r.raise_for_status()
            self.fear_and_greed_index = int(r.json()['data'][0]['value'])
        except requests.RequestException: pass

    def _calculate_tactical_score(self, df: pd.DataFrame) -> Tuple[int, Dict[str, int]]:
        all_scores = {}
        for strategy in self.strategies:
            all_scores.update(strategy.analyze(df))
        return sum(all_scores.values()), all_scores

    def extract_atr(self, tf_rows: dict, primary_tf: str = "4h") -> float:
        row = tf_rows.get(primary_tf)
        if row is None or not hasattr(row, 'get'): return 0.0
        val = row.get("ATRr_14") or row.get("ATR_14")
        return val if isinstance(val, (int, float)) and not pd.isna(val) else 0.0
